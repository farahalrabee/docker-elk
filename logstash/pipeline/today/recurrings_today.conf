input {
  tcp {
    port => 2000
}

   jdbc {
    jdbc_driver_library => "/usr/share/logstash/config/mysql-connector-java-5.1.44-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://192.168.1.102:3306/live"
    jdbc_user => "farah"
    jdbc_password => "123456"
    type => 'recurrings'
    statement => "SELECT client_users.avatar,client_users.id as client_id , client_users.name as username , client_users.email , client_users.language, client_users.phone_number,client_users.facebook_id,client_users.secondary_city_id,client_users.primary_city_id,client_users.created_at as user_created_at ,payfort_recurring_payments.user_id as recurring_user, payfort_recurring_payments.id as recurring_id, payfort_recurring_payments.recurring_date,payfort_recurring_payments.membership_plan_id as recurring_plan_id,payfort_recurring_payments.is_delete as recurring_is_delete,payfort_recurring_payments.created_at as recurring_create_at FROM `client_users` left join payfort_recurring_payments on payfort_recurring_payments.user_id = client_users.id WHERE MONTH(payfort_recurring_payments.created_at)  = MONTH(CURDATE()) and  YEAR(payfort_recurring_payments.created_at)  = YEAR(CURDATE()) and  DAY(payfort_recurring_payments.created_at)  = DAY(CURDATE()) order by payfort_recurring_payments.created_at ASC"
    codec => "json"

  }
}

filter {

mutate {

rename => { 
    "recurring_id" => "[recurrings][recurring_id]" 
    "date" => "[recurrings][date]"
    "recurring_is_delete" => "[recurrings][recurring_is_delete]" 
    "recurring_user" => "[recurrings][recurring_user]" 
    "recurring_date" => "[recurrings][recurring_date]" 
    "recurring_plan_id" => "[recurrings][recurring_plan_id]"
    "recurring_create_at" => "[recurrings][recurring_create_at]" 
    }
    }

aggregate {
  task_id => "%{client_id}"
  code => "
    map['recurrings'] ||= []
   event.to_hash.each do |key,value|
   map[key] = value unless map.has_key?(key)
   map[key] << value if map[key].is_a?(Array)
   end
  "
  push_previous_map_as_event => true
  timeout_tags => ['aggregated']
}
} 


output {
elasticsearch { 
hosts => ["elasticsearch:9200"]
index => "users_recurrings-%{+YYYY-MM-dd}"
document_type => "user"
document_id =>  "%{client_id}"
 }

stdout { codec => rubydebug }
}


