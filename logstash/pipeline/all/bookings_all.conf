input {
  tcp {
    port => 5000
}


      jdbc {
    jdbc_driver_library => "/usr/share/logstash/config/mysql-connector-java-5.1.44-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://188.226.156.99:3306/allympiapass_testing?useCursorFetch=true"
    jdbc_user => "elk_user"
    jdbc_password => "elk$2017"
    type => 'bookings'
    clean_run => false
    jdbc_paging_enabled => "true"
    jdbc_page_size => 1000
    statement => "SELECT client_users.avatar,client_users.id as cid , client_users.name as username , client_users.email , client_users.language,client_users.facebook_id,client_users.secondary_city_id,client_users.primary_city_id,client_users.created_at as user_created_at, bookings.id as booking_id ,bookings.user_membership_id as booking_plan ,bookings.user_id as booking_user, bookings.schedule_id as booking_schedule, bookings.voucher_id as booking_voucher, bookings.user_show as bookings_show , bookings.is_delete booking_is_delete, bookings.cost_per_no_show, bookings.cost_per_show,bookings.created_at as booking_created_at ,DATE_FORMAT(bookings.created_at, '%Y-%m-%d') AS date_bookings FROM  client_users LEFT JOIN bookings on bookings.user_id = client_users.id"

    schedule => "* * * * *"
    codec => "json"

  }


}

filter {
 if [type]  == "bookings" {

   mutate {
    rename => {
 "booking_id" => "[bookings][booking_id]"
    "booking_plan" => "[bookings][booking_plan]"
    "booking_user" => "[bookings][booking_user]"
    "booking_schedule" => "[bookings][booking_schedule]"
    "booking_voucher" => "[bookings][booking_voucher]"
    "bookings_show" => "[bookings][bookings_show]"
    "booking_is_delete" => "[bookings][booking_is_delete]"
    "cost_per_no_show" => "[bookings][cost_per_no_show]"
    "cost_per_show" => "[bookings][cost_per_show]"
    "booking_created_at" => "[bookings][booking_created_at]"
    "date_bookings" => "[bookings][date_bookings]"
    }
    }

aggregate {
  task_id => "%{cid}"
  code => "
 map['bookings'] ||= []

   event.to_hash.each do |key,value|
   map[key] = value unless map.has_key?(key)
   map[key] << value if map[key].is_a?(Array)
   end
  "
  push_previous_map_as_event => true
  timeout_tags => ['aggregated']


}
}

if ![bookings][bookings_show] {


 mutate {

 update => { "[bookings][bookings_show]" => 0 }
}

}

 sleep {
    time => "6"   # Sleep 1 second
    every => 1000   # on every 10th event
  }


}


output {
if [type]  == "bookings" {
elasticsearch {
hosts => ["elasticsearch:9200"]
index => "bookings-%{[bookings][date_bookings]}"
document_type => "user"
document_id =>  "%{[bookings][booking_id]}"
user =>  elastic
password => changeme
 }
 }

 stdout { codec => rubydebug }


}


                                                                                                                                                                                                           
