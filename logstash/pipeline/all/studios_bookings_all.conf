input {
  tcp {
    port => 7000
}

     jdbc {
    jdbc_driver_library => "/usr/share/logstash/config/mysql-connector-java-5.1.44-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://188.226.156.99:3306/allympiapass_testing?useCursorFetch=true"
    jdbc_user => "elk_user"
    jdbc_password => "elk$2017"
    type => 'studios'
    clean_run => false
    jdbc_paging_enabled => "true"
    jdbc_page_size => 1000
    statement => "SELECT studios.id as studio_id , studios.city_id, studios.area_id, studios.name as studio_name, studios.description,studios.logo,studios.url,studios.cost_per_no_show ,studios.cost_per_show,studios.address_1,studios.phone_1,studios.latitude,studios.longitude,studios.is_block,studios.created_at as studio_created_at , events.id as eid , events.name as event_name , events.description as event_desc , events.gender , events.created_at as event_created_at , events.activity_id as event_activity,schedules.start_time, schedules.end_time,schedules.event_id as schedule_event_id ,events.studio_id as event_studio, bookings.id as booking_id , bookings.user_membership_id as booking_plan ,bookings.user_id as booking_user, bookings.schedule_id as booking_schedule, bookings.voucher_id as booking_voucher, bookings.user_show as studio_bookings_show , bookings.is_delete booking_is_delete,bookings.created_at as booking_created_at ,DATE_FORMAT(bookings.created_at, '%Y-%m-%d') AS date_studio FROM `studios` LEFT join events on studios.id = events.studio_id LEFT JOIN schedules on events.id = schedules.event_id left join bookings on bookings.schedule_id = schedules.id where bookings.id is not NULL order by studios.id"

    schedule => "* * * * *"
    codec => "json"

  }

}

filter {
if [type]  == "studios" {
   mutate {
    rename => { 
    "booking_id" => "[bookings][booking_id]" 
    "booking_plan" => "[bookings][booking_plan]" 
    "booking_user" => "[bookings][booking_user]" 
    "booking_schedule" => "[bookings][booking_schedule]"
    "booking_voucher" => "[bookings][booking_voucher]" 
    "bookings_show" => "[bookings][studio_bookings_show]" 
    "booking_is_delete" => "[bookings][booking_is_delete]" 
    "event_studio" => "[bookings][event_studio]" 
    "date_studio" => "[bookings][date_studio]" 

    }
    }
if ![bookings][studio_bookings_show] {
 mutate {

update => { "[bookings][user_show]" => false }
}

}
mutate {
    convert => { "longitude" => "float" }
    convert => { "latitude" => "float" }
}
aggregate {
  task_id => "%{studio_id}"
  code => "
 map['bookings'] ||= []
 
   event.to_hash.each do |key,value|
   map[key] = value unless map.has_key?(key)
   map[key] << value if map[key].is_a?(Array)
   end
  "
  push_previous_map_as_event => true
  timeout_tags => ['aggregated']

}
}
 sleep {
    time => "6"   # Sleep 1 second
     every => 1000   # on every 10th event
  }
}

output {
if [type]  == "studios" {
elasticsearch { 
hosts => ["elasticsearch:9200"]
index => "studios_bookings-%{[bookings][date_studio]}"
document_type => "studio"
document_id =>  "%{[bookings][booking_id]}"
user =>  elastic
password => changeme

 }
 } 
  stdout { codec => rubydebug }


}


